import axios from "axios";
import "bootstrap/dist/css/bootstrap.min.css";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import React, { useEffect, useState } from "react";
import "../css/main.css";

export default function Prediction() {
  const [addresses, setAddresses] = useState([]);
  const [address, setAddress] = useState("");
  const [priceCategory, setPriceCategory] = useState("Prime Area");
  const [prediction, setPrediction] = useState(null);
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const [showAdvanced, setShowAdvanced] = useState(false);
  const [user, setUser] = useState(null);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const userData = await axios.get("http://127.0.0.1:5000/get_user_profile");
        setUser(userData.data);
      } catch (err) {
        console.error("Error fetching user profile", err);
      }
    };
    fetchUser();

    const fetchAddresses = async () => {
      try {
        const response = await axios.get("http://127.0.0.1:5000/get_addresses");
        setAddresses(response.data.addresses);
      } catch (err) {
        console.error("Error fetching addresses", err);
      }
    };
    fetchAddresses();
  }, []);

  const fetchPrediction = async (address, priceCategory) => {
    try {
      const response = await axios.post("http://127.0.0.1:5000/predict", {
        address,
        price_category: priceCategory,
      });
      setPrediction(response.data);
    } catch (err) {
      setError(err.response?.data?.error || "Error fetching prediction.");
    }
  };

  const handlePredict = async (e) => {
    e.preventDefault();
    setError("");
    setPrediction(null);
    setLoading(true);

    await fetchPrediction(address, priceCategory);

    setLoading(false);
  };

  const downloadPDF = () => {
    if (!prediction) {
      alert("Prediction data is missing.");
      return;
    }

    const doc = new jsPDF();
    doc.setFont("helvetica", "bold");
    doc.setFontSize(18);
    doc.text("GeoPredict - Land Price Prediction Report", 14, 20);
    doc.setFontSize(12);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 14, 30);
    doc.text("Generated by GeoPredict", 14, 38);
    doc.line(14, 40, 195, 40);

    const priceDetails = [
      ["Address", prediction.address],
      ["Area Type", prediction.price_category],
      ["Predicted Price (per perch)", `Rs. ${prediction.predicted_price.toLocaleString()}`],
    ];

    autoTable(doc, {
      startY: 50,
      head: [["Field", "Value"]],
      body: priceDetails,
      theme: "striped",
      styles: { fontSize: 10, cellPadding: 2 },
    });

    if (showAdvanced && prediction.distance_info) {
      const distanceDetails = Object.keys(prediction.distance_info).map((key) => [
        key,
        `${parseFloat(prediction.distance_info[key]).toFixed(3)} km`,
      ]);

      autoTable(doc, {
        startY: doc.lastAutoTable.finalY + 5,
        head: [["Location Type", "Distance"]],
        body: distanceDetails,
        theme: "grid",
        styles: { fontSize: 10, cellPadding: 2 },
      });
    }

    doc.save(`GeoPredict_Prediction_${prediction.address}.pdf`);
  };

  return (
    <div className="min-vh-100 d-flex align-items-center justify-content-center bg-light">
      <div className="container">
        <div className="row justify-content-center">
          <div className="col-md-8">
            <div className="card shadow-lg p-4">
              {user && (
                <div className="text-center mb-4">
                  <img
                    src={user.profilePicture || "https://via.placeholder.com/150"}
                    alt="Profile"
                    className="rounded-circle"
                    style={{ width: "80px", height: "80px" }}
                  />
                  <h4 className="mt-2">{user.name}</h4>
                </div>
              )}

              <h2 className="text-center mb-4 text-primary">Land Price Prediction</h2>

              <form onSubmit={handlePredict}>
                <div className="row">
                  <div className="col-md-12">
                    <label className="form-label">Select Address</label>
                    <select
                      value={address}
                      onChange={(e) => setAddress(e.target.value)}
                      className="form-select"
                      required
                    >
                      <option value="">-- Select Address --</option>
                      {addresses.map((addr, idx) => (
                        <option key={idx} value={addr}>
                          {addr}
                        </option>
                      ))}
                    </select>
                  </div>
                  <div className="col-md-12 mt-3">
                    <label className="form-label">Area Type</label>
                    <select
                      value={priceCategory}
                      onChange={(e) => setPriceCategory(e.target.value)}
                      className="form-select"
                    >
                      <option value="Prime Area">Prime Area</option>
                      <option value="Mid-range Area">Mid-range Area</option>
                      <option value="Outer Area">Outer Area</option>
                    </select>
                  </div>
                </div>

                <button
                  type="submit"
                  className="btn btn-primary w-100 mt-3"
                  disabled={!address || loading}
                >
                  {loading ? "Predicting..." : "Predict Price"}
                </button>
              </form>

              {prediction && (
                <div className="card shadow-lg mt-4 p-4">
                  <h3 className="text-center text-success">Prediction Results</h3>

                  <div className="row">
                    <div className="col-md-12">
                      <div className="card border-primary p-3">
                        <h4 className="text-center text-primary">{prediction.address}</h4>
                        <h2 className="text-center text-success">
                          Rs. {prediction.predicted_price.toLocaleString()}
                        </h2>
                        <p className="text-center">
                          <strong>Area Type:</strong> {prediction.price_category}
                        </p>
                      </div>
                    </div>
                  </div>

                  <button
                    className="btn btn-outline-secondary w-100 mt-3"
                    onClick={() => setShowAdvanced(!showAdvanced)}
                  >
                    {showAdvanced ? "Hide Advanced Details" : "View Advanced Features"}
                  </button>

                  {showAdvanced && prediction.distance_info && (
                    <div className="mt-4">
                      <h5 className="text-center">Additional Information</h5>
                      <ul className="list-group">
                        {Object.entries(prediction.distance_info).map(([key, value]) => (
                          <li key={key} className="list-group-item">
                            {key}: <strong>{parseFloat(value).toFixed(3)} km</strong>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}

                  <button className="btn btn-success w-100 mt-3" onClick={downloadPDF}>
                    Download Prediction Report
                  </button>
                </div>
              )}

              {error && <p className="mt-3 text-danger text-center">{error}</p>}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
