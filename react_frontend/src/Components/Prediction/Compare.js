import axios from "axios";
import "bootstrap/dist/css/bootstrap.min.css";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import React, { useEffect, useState } from "react";
import '../css/main.css';

export default function Compare() {
  const [addresses, setAddresses] = useState([]);
  const [address1, setAddress1] = useState("");
  const [address2, setAddress2] = useState("");
  const [priceCategory1, setPriceCategory1] = useState("Prime Area");
  const [priceCategory2, setPriceCategory2] = useState("Prime Area");
  const [prediction1, setPrediction1] = useState(null);
  const [prediction2, setPrediction2] = useState(null);
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const [showAdvanced, setShowAdvanced] = useState(false);

  useEffect(() => {
    const fetchAddresses = async () => {
      try {
        const response = await axios.get("http://127.0.0.1:5000/get_addresses");
        setAddresses(response.data.addresses);
      } catch (err) {
        console.error("Error fetching addresses", err);
      }
    };
    fetchAddresses();
  }, []);

  const fetchPrediction = async (address, priceCategory, setPrediction) => {
    try {
      const response = await axios.post("http://127.0.0.1:5000/predict", {
        address,
        price_category: priceCategory,
      });
      setPrediction(response.data);
    } catch (err) {
      setError(err.response?.data?.error || "Error fetching prediction.");
    }
  };

  const handleCompare = async (e) => {
    e.preventDefault();
    setError("");
    setPrediction1(null);
    setPrediction2(null);
    setShowAdvanced(false);
    setLoading(true);

    await Promise.all([
      fetchPrediction(address1, priceCategory1, setPrediction1),
      fetchPrediction(address2, priceCategory2, setPrediction2),
    ]);

    setLoading(false);  };

  const downloadPDF = () => {
    if (!prediction1 || !prediction2) {
      alert("Comparison data is missing.");
      return;
    }

    const doc = new jsPDF();
    doc.setFont("helvetica", "bold");
    doc.setFontSize(18);
    doc.text("GeoPredict - Land Price Comparison Report", 14, 20);
    doc.setFontSize(12);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 14, 30);
    doc.text("Generated by GeoPredict", 14, 38);
    doc.line(14, 40, 195, 40);

    // Price Comparison Table
    const priceDetails = [
      ["Address", prediction1.address, prediction2.address],
      ["Area Type", prediction1.price_category, prediction2.price_category],
      ["Predicted Price (per perch)", `Rs. ${prediction1.predicted_price.toLocaleString()}`, `Rs. ${prediction2.predicted_price.toLocaleString()}`],
    ];

    autoTable(doc, {
      startY: 50,
      head: [["Field", "Property 1", "Property 2"]],
      body: priceDetails,
      theme: "striped",
      styles: { fontSize: 10, cellPadding: 2 },
    });

    if (showAdvanced && prediction1.distance_info && prediction2.distance_info) {
      const distanceDetails = Object.keys(prediction1.distance_info).map((key) => [
        key,
        `${parseFloat(prediction1.distance_info[key]).toFixed(3)} km`,
        `${parseFloat(prediction2.distance_info[key]).toFixed(3)} km`
      ]);

      autoTable(doc, {
        startY: doc.lastAutoTable.finalY + 5,
        head: [["Location Type", "Property 1 Distance", "Property 2 Distance"]],
        body: distanceDetails,
        theme: "grid",
        styles: { fontSize: 10, cellPadding: 2 },
      });
    }

    doc.save(`GeoPredict_Comparison_${prediction1.address}_vs_${prediction2.address}.pdf`);
  };

  return (
    <div className="min-vh-100 d-flex align-items-center justify-content-center bg-light">
      <div className="container">
        <div className="row justify-content-center">
          <div className="col-md-8">
            <div className="card shadow-lg p-4">
              <h2 className="text-center mb-4 text-primary">Compare Land Prices</h2>

              <form onSubmit={handleCompare}>
                <div className="row">
                  {[{ address: address1, setAddress: setAddress1, priceCategory: priceCategory1, setPriceCategory: setPriceCategory1 },
                    { address: address2, setAddress: setAddress2, priceCategory: priceCategory2, setPriceCategory: setPriceCategory2 }].map((item, index) => (
                      <div className="col-md-6" key={index}>
                        <label className="form-label">Select Address {index + 1}</label>
                        <select value={item.address} onChange={(e) => item.setAddress(e.target.value)} className="form-select" required>
                          <option value="">-- Select Address --</option>
                          {addresses.map((addr, idx) => (
                            <option key={idx} value={addr}>{addr}</option>
                          ))}
                        </select>
                        <label className="form-label mt-2">Area Type</label>
                        <select value={item.priceCategory} onChange={(e) => item.setPriceCategory(e.target.value)} className="form-select">
                          <option value="Prime Area">Prime Area</option>
                          <option value="Mid-range Area">Mid-range Area</option>
                          <option value="Outer Area">Outer Area</option>
                        </select>
                      </div>
                  ))}
                </div>
                <button type="submit" className="btn btn-primary w-100 mt-3" disabled={!address1 || !address2 || loading}>
                  {loading ? "Comparing..." : "Compare Prices"}
                </button>
              </form>

              {prediction1 && prediction2 && (
                <div className="card shadow-lg mt-4 p-4">
                  <h3 className="text-center text-success">Comparison Results</h3>

                  <div className="row">
                    {[prediction1, prediction2].map((prediction, index) => (
                      <div className="col-md-6" key={index}>
                        <div className="card border-primary p-3">
                          <h4 className="text-center text-primary">{prediction.address}</h4>
                          <h2 className="text-center text-success">Rs. {prediction.predicted_price.toLocaleString()}</h2>
                          <p className="text-center"><strong>Area Type:</strong> {prediction.price_category}</p>
                        </div>
                      </div>
                    ))}
                  </div>

                  <button className="btn btn-outline-secondary w-100 mt-3" onClick={() => setShowAdvanced(!showAdvanced)}>
                    {showAdvanced ? "Hide Advanced Details" : "View Advanced Features"}
                  </button>

                  {showAdvanced && (
                    <div className="mt-4">
                      <h5 className="text-center">Additional Information</h5>
                      <div className="row">
                        {[prediction1, prediction2].map((prediction, index) => (
                          <div className="col-md-6" key={index}>
                            <h6 className="text-center">{prediction.address} Details</h6>
                            <ul className="list-group">
                              {Object.entries(prediction.distance_info).map(([key, value]) => (
                                <li key={key} className="list-group-item">{key}: <strong>{parseFloat(value).toFixed(3)} km</strong></li>
                              ))}
                            </ul>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  <button className="btn btn-success w-100 mt-3" onClick={downloadPDF}>
                    Download Comparison Report
                  </button>
                </div>
              )}

              {error && <p className="mt-3 text-danger text-center">{error}</p>}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
